#!/usr/bin/env zsh

# git-replay
# copyright 2020 Henry Bley-Vroman
#
# Automate Git rebases and stage creation
# https://github.com/olets/git-replay

__git_replay_abort() {
	if [[ -f $action_path ]]; then
		case $(head -1 $action_path) in
			merge)
				git merge --abort
				;;
			rebase)
				git rebase --abort
				;;
		esac
	fi
	rm -rf $dir
}

__git_replay_back_up() {
	local branch

	(( $# )) || __git_replay_print_error "git replay back-up: no branch specified"

	branch=$1

	if (( dry_run )); then
		__git_replay_print_log "Would back up $branch"
	else
		__git_replay_print_log "Backing up $branch"

		if (( quiet )); then
			git branch --quiet --force $BACKUP_PREFIX/$branch $branch || \
				'builtin' 'echo' "The branch \`$branch' was not backed up. Perhaps it did not exist at the time of backup?" >> $warning_path
		else
			'builtin' 'print' "git branch --force $BACKUP_PREFIX/$branch $branch"

			git branch --force $BACKUP_PREFIX/$branch $branch || \
				'builtin' 'echo' "The branch \`$branch' was not backed up. Perhaps it did not exist at the time of backup?" >> $warning_path
		fi
	fi
}

__git_replay_delete_backup() {
	local branch
	local backup_branch
	local -a backup_branches

	backup_branches=( ${(f)"$(git for-each-ref --format='%(refname:short)' refs/heads/$BACKUP_PREFIX)"} )
	[[ -z $backup_branches ]] && __git_replay_print_warning "No backup branches found" && return

	for backup_branch in $backup_branches; do
		branch=${backup_branch#$BACKUP_PREFIX/}

		if (( dry_run )); then
			__git_replay_print_log "Would delete $backup_branch"
		else
			__git_replay_print_log "Deleting $backup_branch"

			if ! git rev-parse $branch &>/dev/null; then
				mkdir -p $dir
				touch $warning_path

				'builtin' 'echo' "No branch \`$branch\` found. Not deleting the backup in case it is needed.\nTo delete the backup, run\n        git branch -D $backup_branch" >> $warning_path
			else
				if (( quiet )); then
					git branch --quiet -D $backup_branch
				else
					'builtin' 'print' "git branch -D $backup_branch"
					git branch -D $backup_branch
				fi
			fi
		fi
	done
}

__git_replay_diverged() {
	local branch
	local sha
	local remote_sha

	branch=$1
	sha=$(git rev-parse $branch)
	remote_sha=$(git rev-parse $branch@{push} 2>/dev/null)

	[[ -n $sha && -n $remote_sha && $sha != $remote_sha ]]
}

__git_replay_do_todo() {
	local -a cmd_words

	cmd_words=( ${(z)1} )

	case $cmd_words[1] in
		merge)
			local branch
			local commit
			local -i the_exit_code

			branch=$cmd_words[3]
			commit=$cmd_words[2]

			touch $action_path
			'builtin' 'echo' merge > $action_path

			if (( dry_run )); then
				__git_replay_print_log "Would merge $commit into $branch"
			else
				__git_replay_print_log "Merging $commit into $branch"

				if (( quiet )); then
					git merge --quiet --rerere-autoupdate --no-ff --no-edit $commit
					the_exit_code=$?
				else
					'builtin' 'print' "git merge --rerere-autoupdate --no-ff --no-edit $commit"
					git merge --rerere-autoupdate --no-ff --no-edit $commit
					the_exit_code=$?
				fi

				(( the_exit_code )) && __git_replay_merge_continue $commit $branch $the_exit_code
			fi

			rm $action_path
			;;
		merge-continue)
			local branch
			local commit

			branch=$cmd_words[3]
			commit=$cmd_words[2]

			__git_replay_print_log "Continuing merging $commit into $branch"
			git rerere && __git_replay_merge_continue $commit $branch

			rm $action_path
			;;
		rebase)
			local branch
			local -i the_exit_code
			local upstream

			branch=$cmd_words[3]
			upstream=$cmd_words[2]

			touch $action_path
			'builtin' 'echo' rebase > $action_path

			if (( back_up_before_manipulating )); then
				__git_replay_back_up $branch
			fi

			if (( dry_run )); then
				__git_replay_print_log "Would rebase $branch off $upstream"
			else
				__git_replay_print_log "Rebasing $branch off $upstream"
				if (( quiet )); then
					git rebase --quiet --rerere-autoupdate $upstream $branch
					the_exit_code=$?
				else
					'builtin' 'print' "git rebase --rerere-autoupdate $upstream $branch"
					git rebase --rerere-autoupdate $upstream $branch
					the_exit_code=$?
				fi

				(( the_exit_code )) && __git_replay_rebase_continue $the_exit_code $upstream $branch

				__git_replay_log_divergence $branch
			fi

			rm $action_path
			;;
		rebase-continue)
			local branch
			local newbase
			local upstream

			branch=$cmd_words[3]
			newbase=$cmd_words[4]
			upstream=$cmd_words[2]

			if [[ -n $newbase ]]; then
				__git_replay_print_log "Continuing rebasing $branch onto $newbase from $upstream"
			else
				__git_replay_print_log "Continuing rebasing $branch off $upstream"
			fi

			if ! (( dry_run )); then
				(( quiet )) || 'builtin' 'print' "git rerere"
				git rerere

				__git_replay_rebase_continue 0 $upstream $branch
				__git_replay_log_divergence $branch
			fi

			rm $action_path
			;;
		rebase-onto)
			local branch
			local -i the_exit_code
			local newbase
			local upstream

			branch=$cmd_words[4]
			newbase=$cmd_words[2]
			upstream=$cmd_words[3]

			touch $action_path
			'builtin' 'echo' rebased > $action_path

			if (( back_up_before_manipulating )); then
				__git_replay_back_up $branch
			fi

			if (( dry_run )); then
				__git_replay_print_log "Would rebase $branch onto $newbase from $upstream"
			else
				__git_replay_print_log "Rebasing $branch onto $newbase from $upstream"

				if (( quiet )); then
					git rebase --quiet --rerere-autoupdate --onto $newbase $upstream $branch
					the_exit_code=$?
				else
					'builtin' 'print' "git rebase --rerere-autoupdate --onto $newbase $upstream $branch"
					git rebase --rerere-autoupdate --onto $newbase $upstream $branch
					the_exit_code=$?
				fi

				(( the_exit_code )) && __git_replay_rebase_continue $the_exit_code $upstream $branch $newbase

				__git_replay_log_divergence $branch
			fi

			rm $action_path
			;;
		stage-end)
			local branch

			branch=$cmd_words[2]

			(( dry_run )) || __git_replay_log_divergence $branch
			;;
		stage-start)
			local branch
			local -i the_exit_code
			local start_point

			branch=$cmd_words[2]
			start_point=$cmd_words[3]

			if (( back_up_before_manipulating )); then
				__git_replay_back_up $branch
			fi

			if (( dry_run )); then
				__git_replay_print_log "Would reset $branch to $start_point"
			else
				__git_replay_print_log "Resetting $branch to $start_point"

				if (( quiet )); then
					git checkout --quiet -B $branch $start_point
					the_exit_code=$?
				else
					'builtin' 'print' "git checkout -B $branch $start_point"
					git checkout -B $branch $start_point
					the_exit_code=$?
				fi
			fi

			(( the_exit_code )) && __git_replay_print_error "Staging $branch failed. Does \`$start_point' exist?"
			;;
		*)
			__git_replay_print_error "git-replay can not run the todo \`$todo'"
			;;
	esac
}

__git_replay_get_branches() {
	local -a branches

	# get all branches in rebase commands
	branches+=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval '.rebase.*.[]' -)"} )

	# get all branches in rebase-onto commands
	branches+=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval '.rebase-onto.*.*.[]' -)"} )

	# get all branches in stage commands
	branches+=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval '.stage.*.[] | path | .[-1]' -)"} )

	# unique-ify
	typeset -U branches

	echo $branches
}

__git_replay_log_divergence() {
	local branch

	branch=$1

	__git_replay_diverged $branch || return

	mkdir -p $dir
	touch $warning_path
	'builtin' 'echo' "$branch has diverged from its push destination" >> $warning_path
	has_diverged_branch=1
}

__git_replay_main() {
	local -i auto_dediverge
	local branch
	local -a branches
	local -i continue_in_progress_todo
	local -i dediverge
	local -i delete_backup
	local -i exit_code
	local -i force_dediverge
	local -i no_color
	local opt
	local -i queue_rebases
	local -i queue_rebase_ontos
	local -i queue_stages
	local -i restore_backup
	local rev
	local -i subcommands
	local -a todos

	queue_rebases=1
	queue_rebase_ontos=1
	queue_stages=1

	if [[ -n $root ]]; then
		rev=$(git config replay.rev)
	fi

	for opt in $@; do
		[[ $opt == "--no-color" ]] && no_color=1
	done

	if ! (( no_color )); then
		autoload -U colors && colors
		color=(
			[error]="%F{red}"
			[success]="%F{green}"
			[log]="%F{blue}"
			[warning]="%F{yellow}"
		)
	fi

	while (( $# )); do
		case $1 in
			--abort)
				__git_replay_abort
				return
				;;
			--rev)
				rev=$2
				shift 2
				;;
			--continue)
				[[ -f $todo_path ]] || __git_replay_print_error "fatal: No replay in progress?"
				continue_in_progress_todo=1
				queue_rebase_ontos=0
				queue_rebases=0
				queue_stages=0
				shift
				;;
			--back-up)
				back_up_before_manipulating=1
				shift
				;;
			--dediverge)
				auto_dediverge=1
				shift
				;;
			--dry-run)
				dry_run=1
				shift
				;;
			--file)
				file=$2
				shift 2
				;;
			--force)
				force_dediverge=1
				shift
				;;
			--help|\
			help)
				(( subcommands++ ))
				'command' 'man' git-replay 2>/dev/null || 'command' 'man' ${SOURCE_PATH}/man/man1/git-replay.1
				return
				;;
			--no-color)
				shift
				;;
			-q|\
			--quiet)
				quiet=1
				shift
				;;
			-qq|\
			--quieter)
				quiet=1
				quieter=1
				shift
				;;
			--skip)
				[[ -f $todo_path ]] || __git_replay_print_error "fatal: No replay in progress?"
				continue_in_progress_todo=1
				queue_rebase_ontos=0
				queue_rebases=0
				queue_stages=0
				__git_replay_pop_todo
				shift
				;;
			-v|\
			--version)
				'builtin' 'printf' "git-replay version %s\n" "$VERSION"
				return
				;;
			back-up)
				(( subcommands++ ))
				back_up=1
				queue_rebases=0
				queue_rebase_ontos=0
				queue_stages=0
				shift
				;;
			dediverge)
				(( subcommands++ ))
				dediverge=1
				queue_rebases=0
				queue_rebase_ontos=0
				queue_stages=0
				shift
				;;
			delete-backup)
				(( subcommands++ ))
				delete_backup=1
				queue_rebases=0
				queue_rebase_ontos=0
				queue_stages=0
				shift
				;;
			# help -- see --help
			rebase)
				(( subcommands++ ))
				queue_rebase_ontos=0
				queue_stages=0
				shift
				;;
			rebase-onto)
				(( subcommands++ ))
				queue_rebases=0
				queue_stages=0
				shift
				;;
			restore-backup)
				(( subcommands++ ))
				queue_rebases=0
				queue_rebase_ontos=0
				queue_stages=0
				restore_backup=1
				shift
				;;
			stage)
				(( subcommands++ ))
				queue_rebases=0
				queue_rebase_ontos=0
				shift
				;;
			*)
				__git_replay_print_error "git-replay unknown option"
				;;
		esac
	done

	[[ -n $root ]] || __git_replay_print_error "fatal: not a git repository (or any of the parent directories): .git"

	(( subcommands > 1 )) && __git_replay_print_log "git-replay too many subcommands"

	if [[ -n $rev ]]; then
		config=$(git show $rev:$file)
		exit_code=$?
	else
		config=$(cat $file)
		exit_code=$?
	fi

	(( exit_code )) && __git_replay_print_error "Could not find the file $file${rev:+ in rev \`$rev\'}"

	if [[ -f $todo_path ]] && ! (( continue_in_progress_todo )); then
		# This error's language follows that given by `git rebase` when a rebase is already in progress
		__git_replay_print_error "fatal: It seems that there is already a replay todo file, and\nI wonder if you are in the middle of another replay.  If that is the\ncase, please try\n        git replay [--file <file>] (--continue | --abort | --skip)\nIf that is not the case, please\n        rm \".git/$dir_name/git-replay-todos\"\nand run me again.  I am stopping in case you still have something\nvalueable there."
	fi

	mkdir -p $dir
	touch $todo_path

	(( queue_rebases )) && __git_replay_write_rebase_todos
	(( queue_rebase_ontos )) && __git_replay_write_rebase_onto_todos
	(( queue_stages )) && __git_replay_write_staging_todos

	if (( back_up )); then
		branches=( ${(z)$(__git_replay_get_branches)} )

		for branch in $branches; do
			__git_replay_back_up $branch
		done
	fi

	(( delete_backup )) && __git_replay_delete_backup

	(( restore_backup )) && __git_replay_restore_backup

	todos=( ${(f)"$('command' 'cat' $todo_path)"} )

	if (( ${#todos} )); then
		for todo in $todos; do
			__git_replay_do_todo $todo
			__git_replay_pop_todo
		done

		(( dry_run )) || __git_replay_print_log Replay complete
	fi

	__git_replay_pop_todo
	rm $todo_path

	__git_replay_warnings && rm $warning_path

	if (( dediverge )); then
		# subcommand was 'dediverge'
		__git_replay_dediverge 1
	elif (( auto_dediverge && has_diverged_branch )); then
		__git_replay_dediverge
	elif (( auto_dediverge && dry_run )); then
		__git_replay_print_log "Would check the replay config for diverged branches"
	fi

	[[ -f $todo_path || -f $warning_path ]] || __git_replay_abort
}

__git_replay_merge_continue() {
	local branch
	local commit
	local -i the_exit_code

	branch=$2
	commit=$1
	the_exit_code=$3

	if [[ $the_exit_code == 128 || ! $(git config rerere.enabled) == true ]]; then
		__git_replay_print_error "Cannot continue"
	fi

	if [[ -n $(git rerere remaining) ]]; then
		todos_updated=$(mktemp ${TMPDIR:-/tmp/}git-replay/git-replay-todos_updated.XXXXXX)
		'builtin' 'echo' "merge-continue $commit $branch" > $todos_updated
		'command' 'cat' $todo_path >> $todos_updated
		'command' 'mv' $todos_updated $todo_path

		__git_replay_log_divergence $branch

		# This error's langage follows that given when `git rebase` hits a conflict.
		__git_replay_print_error 'Resolve all conflicts manually, mark them as resolved with\n"git add/rm <conflicted_files>", then run "git replay [--file <config file>] --continue".\nYou can instead skip this replay action: run "git replay [--file <config file>] --skip".\nTo abort and get back to the state before "git replay", run "git replay --abort".'
	fi

	__git_replay_print_log "All conflicts resolved by git-rerere"

	conflicted_files=$(git diff --name-only --diff-filter=U)

	if [[ -n $conflicted_files ]]; then
		__git_replay_print_log "Adding rerere-resolved conflicted files"
		(( quiet )) || 'builtin' 'print' "git add $conflicted_files"
		git add $conflicted_files
	fi

	(( quiet )) || 'builtin' 'print' "git commit --no-edit"
	git commit --no-edit || __git_replay_print_error "Cannot continue"
}

__git_replay_pop_todo() {
	todos_updated=$(mktemp ${TMPDIR:-/tmp/}git-replay/git-replay-todos_updated.XXXXXX)
	'command' 'sed' '1d' $todo_path > $todos_updated
	'command' 'mv' $todos_updated $todo_path
}

__git_replay_print_error() {
	__git_replay_warnings
	'builtin' 'print' -P "$color[error]$@%f"
	'builtin' 'exit' 1
}

__git_replay_print_log() {
	(( quieter )) || 'builtin' 'print' -P "$color[log]$@%f"
}

__git_replay_print_success() {
	(( quieter )) || 'builtin' 'print' -P "$color[success]$@%f"
}

__git_replay_print_warning() {
	(( quieter )) || 'builtin' 'print' -P "$color[warning]$@%f"
}

__git_replay_rebase_continue() {
	local branch
	local -i the_exit_code
	local newbase
	local upstream

	branch=$3
	the_exit_code=$1
	newbase=$4
	upstream=$2

	if [[ $the_exit_code == 128 || ! $(git config rerere.enabled) == true ]]; then
		__git_replay_print_error "Cannot continue"
	fi

	if [[ -n $(git rerere remaining) ]]; then
		todos_updated=$(mktemp ${TMPDIR:-/tmp/}git-replay/git-replay-todos_updated.XXXXXX)
		'builtin' 'echo' "rebase-continue $upstream $branch $newbase" > $todos_updated
		'command' 'cat' $todo_path >> $todos_updated
		'command' 'mv' $todos_updated $todo_path

		__git_replay_log_divergence $branch

		# This error's langage follows that given when `git rebase` hits a conflict.
		__git_replay_print_error 'Resolve all conflicts manually, mark them as resolved with\n"git add/rm <conflicted_files>", then run "git replay [--file <config file>] --continue".\nYou can instead skip this replay action: run "git replay [--file <config file>] --skip".\nTo abort and get back to the state before "git replay", run "git replay --abort".'
	fi

	__git_replay_print_log "All conflicts resolved by git-rerere"

	conflicted_files=$(git diff --name-only --diff-filter=U)

	if [[ -n $conflicted_files ]]; then
		__git_replay_print_log "Adding rerere-resolved conflicted files"
		(( quiet )) || 'builtin' 'print' "git add $conflicted_files"
		git add $conflicted_files
	fi

	(( quiet )) || 'builtin' 'print' "git commit --no-edit && git rebase --continue"
	git commit --no-edit || __git_replay_print_error "Cannot continue"
	git rebase --continue || __git_replay_rebase_continue $? $upstream $branch $newbase
}

__git_replay_restore_backup() {
	local branch
	local backup_branch
	local -a backup_branches

	backup_branches=( ${(f)"$(git for-each-ref --format='%(refname:short)' refs/heads/$BACKUP_PREFIX)"} )
	[[ -z $backup_branches ]] && __git_replay_print_warning "No backup branches found" && return

	__git_replay_print_log "Restoring backed up branches"

	for backup_branch in $backup_branches; do
		branch=${backup_branch#$BACKUP_PREFIX/}

		if git show-ref --verify --quiet refs/heads/$branch; then
			if (( dry_run )); then
				__git_replay_print_log "Would restore $branch"
			else
				__git_replay_print_log "Restoring $branch"

				if (( quiet )); then
					git checkout --quiet -B $branch $backup_branch
				else
					'builtin' 'print' "git checkout -B $branch $backup_branch"
					git checkout -B $branch $backup_branch
				fi
			fi
		fi
	done

	(( dry_run )) || __git_replay_delete_backup
}

__git_replay_warnings() {
	[[ -f $warning_path ]] || return

	local -a __git_replay_warnings

	__git_replay_warnings=( ${(f)"$('command' 'cat' $warning_path)"} )
	'builtin' 'typeset' -U __git_replay_warnings

	for warning in $__git_replay_warnings; do
		__git_replay_print_warning $warning
	done
}

__git_replay_dediverge() {
	local branch
	local -a branches
	local diverged_branch
	local -a diverged_branches
	local -a rebase_branches
	local rebase_branch
	local rebase_branch_value
	local -a rebase_branch_values
	local rebase_onto_upstream
	local rebase_onto_upstream_path
	local -a rebase_onto_upstream_paths
	local rebase_onto_branch
	local -a rebase_onto_branches
	local rebase_onto_newbase
	local rebase_onto_newbase_path
	local -a rebase_onto_newbase_paths
	local rebase_upstream
	local rebase_upstream_path
	local -a rebase_upstream_paths
	local reply
	local -i should_log_context
	local stage_branch
	local stage_branch_path
	local -a stage_branch_paths
	local -a stage_branches
	local stage_start_point
	local stage_start_point_path
	local -a stage_start_point_paths

	should_log_context=$1

	(( should_log_context )) && __git_replay_print_log Checking the replay config for diverged branches...

	branches=( ${(z)$(__git_replay_get_branches)} )

	# identify diverged branches
	for branch in $branches; do
		(( ${diverged_branches[(Ie)$branch]} )) && continue
		git checkout --quiet $branch || continue
		__git_replay_diverged $branch || continue
		diverged_branches+=( $branch )
	done

	if (( should_log_context )) && ! (( ${#diverged_branches} )); then
		(( quieter )) || 'builtin' 'echo' All branches in your git-replay configuration are up to date
		return
	fi

	if (( should_log_context )) && ! (( quieter )); then
		'builtin' 'echo' The following branches have diverged from their remote tracking branches:
		for diverged_branch in $diverged_branches; do
			'builtin' 'echo' $diverged_branch
		done
	fi

	# handle diverged branches
	for diverged_branch in $diverged_branches; do
		if (( dry_run )); then
			if (( force_dediverge )); then
				__git_replay_print_log "Would force push $diverged_branch"
			else
				__git_replay_print_log "Would offer to force push $diverged_branch"
			fi
		else
			if ! (( force_dediverge )); then
				'builtin' 'echo' -n "\\n\`push --force-with-lease' the branch \`$diverged_branch'? It is up to you to make sure this is safe. [yY to accept, any other key to skip] "
				read reply

				if [[ $reply != 'y' && $reply != 'Y' ]]; then
					continue
				fi
			fi

			if (( quiet )); then
				git checkout --quiet $diverged_branch
				git push --force-with-lease --quiet
			else
				'builtin' 'print' "git checkout $diverged_branch"
				git checkout $diverged_branch
				'builtin' 'print' "git push --force-with-lease"
				git push --force-with-lease
			fi
		fi
	done
}

__git_replay_write_rebase_todos() {
	local branch
	local -a branches
	local the_exit_code
	local upstream
	local -a upstreams

	(( $('builtin' 'echo' $config | yq eval '.rebase | length' -) )) || return

	upstreams=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval '.rebase.* | path | .[-1]' -)"} )
	for upstream in $upstreams; do

		if ! git rev-parse $upstream &>/dev/null; then
			# This error's language follows that of `git rebase --onto <a nonexistent ref> <upstream> <branch>`
			'builtin' 'print' "fatal: invalid upstream '$upstream'\n"

			rm $todo_path 2>/dev/null
			__git_replay_print_error "There is a problem in the 'rebase.*' configuration.\nFix it and run me again."
		fi

		branches=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval ".rebase.\"$upstream\".[]" -)"} )
		for branch in $branches; do
			if ! git rev-parse $branch &>/dev/null; then
				# This error's language follows that of `git rebase --onto <a nonexistent ref> <upstream> <branch>`
				'builtin' 'print' "fatal: no such branch/commit '$branch'\n"

				rm $todo_path 2>/dev/null
				__git_replay_print_error "There is a problem in the 'rebase.$upstream.*' configuration.\nFix it and run me again."
			fi

			'builtin' 'echo' "rebase $upstream $branch" >> $todo_path
		done
	done
}

__git_replay_write_rebase_onto_todos() {
	local upstream
	local -a upstreams
	local branch
	local -a branches
	local newbase
	local -a newbases

	(( $('builtin' 'echo' $config | yq eval '.rebase-onto | length' -) )) || return
	# set -x
	newbases=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval '.rebase-onto.* | path | .[-1]' -)"} )
	for newbase in $newbases; do
		if ! git rev-parse $newbase &>/dev/null; then
			# This error's language follows that of `git rebase --onto <a nonexistent ref> <upstream> <branch>`
			'builtin' 'print' "fatal: Does not point to a valid commit '$newbase'\n"

			rm $todo_path 2>/dev/null
			__git_replay_print_error "There is a problem in the 'rebase-onto.*' configuration.\nFix it and run me again."
		fi

		upstreams=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval ".rebase-onto.\"$newbase\".[] | path | .[-1]" -)"} )
		for upstream in $upstreams; do
			if ! git rev-parse $upstream &>/dev/null; then
				# This error's language follows that of `git rebase --onto <a nonexistent ref> <upstream> <branch>`
				'builtin' 'print' "fatal: invalid upstream '$upstream'\n"

				rm $todo_path 2>/dev/null
				__git_replay_print_error "There is a problem in the 'rebase-onto.$newbase.*' configuration.\nFix it and run me again."
			fi

			branches=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval ".rebase-onto.\"$newbase\".\"$upstream\".[]" -)"} )
			for branch in $branches; do
				if ! git rev-parse $branch &>/dev/null; then
					# This error's language follows that of `git rebase --onto <a nonexistent ref> <upstream> <branch>`
					'builtin' 'print' "fatal: no such branch/commit '$branch'\n"

					rm $todo_path 2>/dev/null
					__git_replay_print_error "There is a problem in the 'rebase-onto.$newbase.$upstream.*' configuration.\nFix it and run me again."
				fi

				'builtin' 'echo' "rebase-onto $newbase $upstream $branch" >> $todo_path
			done
		done
	done
	# set +x
}

__git_replay_write_staging_todos() {
	local branch
	local -a branches
	local commit
	local -a commits
	local start_point
	local -a start_points

	(( $('builtin' 'echo' $config | yq eval '.stage | length' -) )) || return

	start_points=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval '.stage.* | path | .[-1]' -)"} )
	for start_point in $start_points; do
		if ! git rev-parse $start_point &>/dev/null; then
			# This error's language follows that of `git reset --hard <a nonexistent ref>`
			'builtin' 'print' "fatal: ambiguous argument '$start_point': unknown revision.\n"

			rm $todo_path 2>/dev/null
			__git_replay_print_error "There is an error in the 'stage.*' configuration.\nFix it and run me again."
		fi

		branches=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval ".stage.\"$start_point\".[] | path | .[-1]" -)"} )
		for branch in $branches; do
			'builtin' 'echo' "stage-start $branch $start_point" >> $todo_path

			commits=( ${(f)"$('builtin' 'echo' $config | 'command' 'yq' eval ".stage.\"$start_point\".\"$branch\".[]" -)"} )
			for commit in $commits; do
				if ! git rev-parse $commit &>/dev/null; then
					# This error's language follows that of `git merge --no-ff <a nonexistent ref>`
					'builtin' 'print' "merge: $commit - not something we can merge\n"

					rm $todo_path 2>/dev/null
					__git_replay_print_error "There is a problem in the 'stage.$branch.*' configuration.\nFix it and run me again."
				fi

				'builtin' 'echo' "merge $commit $branch" >> $todo_path
			done

			'builtin' 'echo' "stage-end $branch" >> $todo_path
		done
	done
}

emulate -L zsh

'builtin' 'setopt' prompt_percent

dir_name=replay

readonly SOURCE_PATH=${0:A:h}
readonly BACKUP_PREFIX="git-replay"
readonly VERSION=3.0.0

mkdir -p ${TMPDIR:-/tmp/}git-replay

config=
file=${$(git config replay.file):-git-replay.yaml}

'builtin' 'typeset' -i back_up_before_manipulating
'builtin' 'typeset' -A color
'builtin' 'typeset' -i dry_run
'builtin' 'typeset' -i has_diverged_branch
'builtin' 'typeset' -i quiet
'builtin' 'typeset' -i quieter
'builtin' 'typeset' -a __git_replay_warnings

root=$(git rev-parse --show-toplevel 2>/dev/null)

if [[ -n $root ]]; then
	dir=$root/.git/$dir_name
	todo_path=${dir}/git-replay-todos
	warning_path=${dir}/git-replay-warnings
	action_path=${dir}/git-replay-current-action
fi

__git_replay_main $@
