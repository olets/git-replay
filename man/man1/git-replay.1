.TH "GIT-REPLAY" 1 "July 30 2021" "git-replay 3.1" "User Commands"
.SH NAME
git-replay \- automate Git rebases and stage creation
.SH SYNOPSIS

\fBgit replay\fR [\fI--file <config file path>\fR]
	[\fI--rev <revision>\fR]
	[\fI--back-up\fR]
	[\fI--dediverge\fR [\fI--force\fR]]
	[\fI--dry-run\fR]
	[(\fI--quiet\fR | \fI-q\fR) | (\fI--quieter\fR | \fI-qq\fR)]
	[\fI--no-color\fR]

\fBgit replay back-up\fR [\fI--force\fR]

\fBgit replay dediverge\fR [\fI--force\fR]

\fBgit replay delete-backup\fR [\fI--file <config file path>\fR]
	[\fI--rev <revision>\fR]
	[\fI--back-up\fR]
	[\fI--dry-run\fR]
	[(\fI--quiet\fR | \fI-q\fR) | (\fI--quieter\fR | \fI-qq\fR)]
	[\fI--no-color\fR]

\fBgit replay restore-backup\fR [\fI--file <config file path>\fR]
	[\fI--rev <revision>\fR]
	[\fI--back-up\fR]
	[\fI--dry-run\fR]
	[(\fI--quiet\fR | \fI-q\fR) | (\fI--quieter\fR | \fI-qq\fR)]
	[\fI--no-color\fR]

\fBgit replay\fR (\fBhelp\fR | \fB--help\fR)

\fBgit replay\fR (\fB--version\fR | \fB-v\fR)

.SH DESCRIPTION
\fBgit-replay\fR automate the rebasing of Git branches and creation of
stage branches (ie branches into which one or more feature branch is
merged with a merge commit).

.SH Commands
The following commands are available:

.IP \(bu
\fBgit replay\fR [\fI--file <config file path>\fR] [\fI--rev <revision>\fR]
	[\fI--back-up\fR]
	[\fI--dry-run\fR]
	[(\fI--quiet\fR | \fI-q\fR) | (\fI--quieter\fR | \fI-qq\fR)]
	[\fI--no-color\fR]

Run the configured automation.

The \fI--file\fR option specifies the path to the configuration file (default
is \fIgit-renew.yaml\fR).

The \fI--rev\fR option specifies the revision (e.g. branch, commit, tag) from
which to read the configuration file.

The \fI--back-up\fR option saves a copy of every branch. Backup branches are
prefixed with \fIgit-replay/\fR.

The \fI--dediverge\fR option follows up the automation with \fIgit replay
dediverge\fR. Largely equivalent to following a replay with \fIgit replay
dediverge\fR but with less repetition in the logs. Add \fI--force\fR to not
prompt before force pushing.

.IP \(bu
\fBgit replay back-up\fR [\fI--force\fR]

Back up manipulated branches.

.IP \(bu
\fBgit replay dediverge\fR [\fI--force\fR]

Identifies all manipulated branches (i.e. \fI<branch>\fRes in \fIrebase\fRs,
and \fI<branch>\fRes and \fI<commit>\fRs in \fIstage\fRs) that have diverged
from their push destinations (aka \fI@{push}\fR), and offers to
\fIgit push --force-with-lease\fR each.

Add \fI--force\fR to not prompt before force pushing.

.IP \(bu
\fBgit replay delete-backup\fR [\fI--dry-run\fR]
	[(\fI--quiet\fR | \fI-q\fR) | (\fI--quieter\fR | \fI-qq\fR)]
	[\fI--no-color\fR]

Delete all backup branches. \fIBackup branches are defined as those with the
prefix "git-replay/".\fR If the backed up branch is not found -for example if
there is no branch "x" to go with the backup branch "git-replay/x"- a warning
will be printed and the backup branch will not be deleted.

.IP \(bu
\fBgit replay restore-backup\fR [\fI--dry-run\fR]
	[(\fI--quiet\fR | \fI-q\fR) | (\fI--quieter\fR | \fI-qq\fR)]
	[\fI--no-color\fR]

Reset every configured branch to its \fBgit-replay/\fR-prefixed backup,
and then delete all backups.

For every backup branch, reset the current branch to the backup and then
delete the backup branch. \fIBackup branches are defined as those with the
prefix "git-replay/."\fR If the backed up branch is not found -for example if
there is no branch "x" to go with the backup branch "git-replay/x"- a
warning will be printed and the backup branch will not be deleted.

.IP \(bu
\fBgit replay\fR (\fBhelp\fR | \fB--help\fR)

Show this document.

.IP \(bu
\fBgit replay\fR (\fB--version\fR | \fB-v\fR)

Show the current version.

.PP
Options:
.RS

.IP \(bu
The \fI--no-color\fR option disables the colorization of output.

.IP \(bu
The \fI--quiet\fR option passes the `--quiet` flag to Git when applicable.

.IP \(bu
The \fI--quieter\fR option additionally suppresses most git-replay output.

.IP \(bu
The \fI--dry-run\fR option logs (unless quieter is set) but does not
run commands.

.SH Action Configuration
Configure automation in the YAML configuration file, by default
\fIgit-replay.yaml\fR in the repo root directory.

The following config file automates the following:

git rebase <upstream 1> <branch 1>

git rebase <upstream 1> <branch 2>

git rebase <upstream 2> <branch 3>

git rebase --onto <newbase 1> <upstream 1> <branch 1>

git rebase --onto <newbase 1> <upstream 1> <branch 2>

git rebase --onto <newbase 2> <upstream 2> <branch 3>

git checkout <branch 1>

git reset --hard <start-point 1>

git merge --no-ff <commit 1>

git merge --no-ff <commit 2>

git merge --no-ff <commit 3>

git checkout <branch 2>

git reset --hard <start-point 1>

git merge --no-ff <commit 3>

git checkout <branch 3>

git reset --hard <start-point 2>

git merge --no-ff <commit 4>

.IP \(bu
\fIYAML config file\fR

rebase:

	<upstream 1>:

		- <branch 1>

		- <branch 2>

	<upstream 2>:

		- <branch 3>

	<upstream 4>:

		- <branch 4>

rebase-onto:

	<newbase 1>:

		<upstream 1>:

			- <branch 1>

			- <branch 2>

	<newbase 2>:

		<upstream 2>:

			- <branch 3>

stage:

	<start-point 1>:

		<branch 1>:

			- <commit 1>

			- <commit 2>

			- <commit 3>

		<branch 2>:

			- <commit 2>

	<start-point 2>:

		<branch 3>:

			- <commit 1>

			- <commit 4>

.SH Option Configuation

Set a custom default file with

	\fbgit config replay.file <file>\fR

Set a custom default revision with

	\fbgit config replay.rev <revision>\fR

.SH AUTHORS

Henry Bley\-Vroman <olets@olets.dev>
